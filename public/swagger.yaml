swagger: "2.0"
info:
  description: "Api is live on: `http://api-startup.yedincisenol.com/` and default version is `v1.0`.

## Api Auth

For access Api you need know client credential
`client-id` and `client-secret`. You can obtain these from your Api developer.

For send `POST` or `PUT` default `Content-Type` is `application/x-www-form-urlencoded`

All endpoints protect with [Rate Limiting](https://github.com/dingo/api/wiki/Rate-Limiting). In default one ip send max
`200` request in `5` minutes. Over the limit, web services return `500` error.

You can view `RateLimit` status in Response headers

## Error handling

In general all requests returns `200`,`201` or `204`. This codes are success responses.
`422` error code is validation error and other `400` or `500` series returns a `message` parameter.
When see those codes you can show `message` parameter on secreen.

## User Auth

The api uses oAuth 2.0 standarts. And issued access tokens are long-lived. That means your access tokens never expires. If you see `401` or `500` error with `Unauthenticated.` message, you should logout user.

## Localization

System default timezone is `UTC`, for customize dates and time you can pass `timezone` parameter via `headers`. Like `Europe/Moscow`.

## Rate Limiting


```

X-RateLimit-Limit : 200

X-RateLimit-Remaining : 192

X-RateLimit-Reset : 1490145803

```

"
  version: "1.1.0"
  title: "Laravel Api Startup"
  contact:
    email: "o@yedincisenol.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api-startup.yedincisenol.com"
basePath: "/"
schemes:
- "http"
x-logo:
  url: 'https://rebilly.github.io/ReDoc/petstore-logo.png'
x-tagGroups:
  - name: Register - Login
    tags:
      - Register
      - Username
      - Login
  - name: Admin
    tags:
      - User (Admin)
  - name: Self
    tags:
      - Self
      - Password Update
      - Connect
      - Device
  - name: Username
    tags:
      - Username
  - name: Others
    tags:
      - Notification
paths:
  "/register":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
        - "Register"
      summary: "Register"
      parameters:
        - in: formData
          name: "name"
          required: true
          description: "Name"
          type: string
        - name: email
          in: formData
          required: true
          description: "Email"
          type: string
        - name: password
          in: formData
          required: true
          description: "Password"
          type: string
      security:
        - ClientID: []
        - ClientSecret: []
      responses:
        201:
          description: "Success"
        422:
          description: "Email allready use"
          schema:
            $ref: '#/definitions/error'
  "resend-verification":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
        - "Register"
      summary: "Re-send verification code"
      parameters:
        - in: formData
          name: "email"
          required: true
          description: "Email address for code"
          type: string
      security:
        - ClientID: []
        - ClientSecret: []
      responses:
        404:
          description: "User not found"
          schema:
            $ref: '#/definitions/error'
        400:
          description: "User already validated"
          schema:
            $ref: '#/definitions/error'
        201:
          description: "Ok - Code will send via Email"
  "reset-password":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
        - "Register"
      summary: Reset password request
      parameters:
        - in: formData
          name: "email"
          required: true
          description: "Email address for code"
          type: string
      security:
        - ClientID: []
        - ClientSecret: []
      responses:
        201:
          description: "OK"
  "reset-code-verify":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
        - Register
      summary: Verify reset code
      parameters:
        - in: formData
          name: "email"
          required: true
          description: "Email address for code"
          type: string
        - in: formData
          name: "code"
          required: true
          description: "Verify code"
          type: string
      security:
        - ClientID: []
        - ClientSecret: []
      responses:
        400:
          description: "Verification failed"
          schema:
            $ref: '#/definitions/error'
        204:
          description: "OK"
  "update-password":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
        - Register
      summary: Update password with reset code
      parameters:
        - in: formData
          name: "email"
          required: true
          description: "Email address for code"
          type: string
        - in: formData
          name: "code"
          required: true
          description: "Verify code"
          type: string
        - name: password
          in: formData
          required: true
          description: "New password"
          type: string
      security:
        - ClientID: []
        - ClientSecret: []
      responses:
        422:
          description: "Wrong verification code"
          schema:
            $ref: '#/definitions/error'
        404:
          description: "User not found with this email"
          schema:
            $ref: '#/definitions/error'
        201:
          description: "OK"
  "/oauth/token":
    post:
      consumes:
        - "application/x-www-form-urlencoded"
      tags:
      - "Login"
      summary: "Login"
      description: "Get access token with Password"
      parameters:
      - in: "formData"
        name: "username"
        description: "Email address for user"
        required: true
        type: string
      - in: "formData"
        name: "password"
        description: "Users password"
        required: true
        type: string
      - in: "formData"
        name: "grant_type"
        description: "Login grant type"
        enum:
          - password
          - refresh_token
          - facebook
          - linkedin
          - twitter
          - google
        required: true
        type: string
      - in: "formData"
        name: "client_id"
        description: "Api client client id"
        required: true
        type: string
      - in: "formData"
        name: "client_secret"
        description: "Api client secret"
        required: true
        type: string
      - in: "formData"
        name: "scope"
        description: "Token scope"
        required: true
        default: "*"
        type: string
      - in: "formData"
        name: name
        description: "Name of user (For thirt-party login)"
        required: false
        type: string
      - in: "formData"
        name: picture_url
        description: "Picture url of user (For thirt-party login)"
        type: string
        required: false
      - in: "formData"
        name: email
        description: "Email of user (for thirt-party login)"
        type: string
        required: false
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/token'
        401:
          description: "Unauthenticated"
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
  "/self/me":
    get:
      tags:
        - Self
      summary: Me
      description: Logger users profile
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/user'
              meta:
                $ref: '#/definitions/meta'
    put:
      summary: Update Me
      description: Update logged user
      tags:
        - Self
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "name"
          description: "Users name"
          in: formData
          type: string
        - name: "email"
          description: "Users email"
          in: formData
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/user'
              meta:
                $ref: '#/definitions/meta'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
  "/self/device":
    post:
      summary: Add device
      description: Add device
      tags:
        - Device
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: token
          description: Device onesignal token
          in: formData
          required: true
          type: string
        - name: device_type
          description: Device type (ios, android, web)
          in: formData
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            properties:
              data:
                $ref: '#/definitions/device'
              meta:
                $ref: '#/definitions/meta'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
    get:
      tags:
        - Device
      summary: My devices
      description: Users devices
      parameters:
        - name: page
          description: Page number
          in: query
          required: false
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                  $ref: '#/definitions/device'
              meta:
                $ref: '#/definitions/meta'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/error'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
  "/self/device/:token":
    get:
      tags:
        - Device
      summary: Device details
      description: Device details
      parameters:
        - name: token
          required: true
          description: Device token
          in: path
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/device'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/error'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
    delete:
      tags:
        - Device
      summary: Remove device
      description: Remove device
      parameters:
        - name: token
          required: true
          description: device token
          in: path
          type: string
      responses:
        204:
          description: OK
        404:
          description: Not found
          schema:
            $ref: '#/definitions/error'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
  "/self/connect":
    get:
      tags:
        - Connect
      summary: Social media connections
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/connect'
              meta:
                $ref: '#/definitions/meta'
    post:
      tags:
        - Connect
      summary: Add new connection
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: provider
          type: string
          enum:
            - facebook
            - twitter
            - linkedin
            - google
          required: true
          description: Provider
          in: formData
        - name: access_token
          type: string
          required: true
          description: Access token on provider for user
          in: formData
        - name: provider_user_id
          type: string
          required: true
          description: "User id on provider for user"
          in: formData
        - name: refresh_token
          type: string
          in: formData
          required: false
          description: "Refresh token on provider for user"
        - name: expires_at
          type: string
          in: formData
          required: false
          description: "Expires datetime. Format: 2018-10-03 13:37"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/connect'
              meta:
                $ref: '#/definitions/meta'
  "/connect/:id":
    put:
      tags:
        - Connect
      summary: Update connection
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: id
          type: integer
          required: true
          in: path
          description: "Connection ID"
        - name: provider
          type: string
          enum:
            - facebook
            - twitter
            - linkedin
            - google
          required: true
          description: Provider
          in: formData
        - name: access_token
          type: string
          required: true
          description: Access token on provider for user
          in: formData
        - name: provider_user_id
          type: string
          required: true
          description: "User id on provider for user"
          in: formData
        - name: refresh_token
          type: string
          in: formData
          required: false
          description: "Refresh token on provider for user"
        - name: expires_at
          type: string
          in: formData
          required: false
          description: "Expires datetime. Format: 2018-10-03 13:37"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/connect'
              meta:
                $ref: '#/definitions/meta'
        404:
          description: "Not found"
          schema:
            $ref: '#/definitions/error'
    delete:
      tags:
        - Connect
      summary: Remove connection
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      responses:
        204:
          description: OK
        404:
          description: "Not found"
          schema:
            $ref: '#/definitions/error'
  "/user":
    get:
      tags:
        - User (Admin)
      summary: Get all users (Admin)
      description: Get all users
      parameters:
        - name: limit
          required: false
          in: query
          description: Pagination Limit
          type: integer
        - name: page
          required: false
          in: query
          description: Page number
          type: integer
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/user'
              meta:
                $ref: '#/definitions/meta'
  "/user/:id":
    get:
      tags:
        - User (Admin)
      summary: Show a user
      description: Show a user
      parameters:
        - name: id
          description: User id
          type: integer
          in: path
          required: true
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/user'
              meta:
                $ref: '#/definitions/meta'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/error'
    delete:
      tags:
        - User (Admin)
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: id
          description: User id
          type: integer
          in: path
          required: true
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      responses:
        204:
          description: OK
        404:
          description: Not found
          schema:
              $ref: '#/definitions/error'
    put:
      tags:
        - User (Admin)
      summary: Update a user
      description: Update a user
      parameters:
        - name: id
          description: User id
          type: integer
          in: path
          required: true
      security:
        - ClientID: []
        - ClientSecret: []
        - AdminSecurity: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/user'
              meta:
                $ref: '#/definitions/meta'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/error'
  /username:
    get:
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
        - Language: []
        - Timezone: []
      summary: Check available
      tags:
        - Username
      parameters:
        - name: q
          description: Username
          required: true
          in: query
          type: string
      responses:
        '204':
          description: Ok
        '400':
          description: You should 3 letter at least
          schema:
            type: object
            properties:
              message:
                type: string
        '409':
          description: Username in use
          schema:
            type: object
            properties:
              message:
                type: string
  "/user/password":
    put:
      tags:
        - Password Update
      summary: Password Update
      description: Update password with current password
      responses:
        422:
          description: Wrong password
          schema:
            type: object
            properties:
              message:
                type: string
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/user'
      security:
        - ClientID: []
        - ClientSecret: []
        - UserSecurity: []
  "/notification":
    post:
      tags:
        - Notification
      summary: Sent notification to custom device
      description: Sent notification immedietly
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: token
          description: Onesignal token
          required: true
          in: formData
          type: string
        - name: notification_body
          description: Notification header
          required: true
          in: formData
          type: string
        - name: notification_data
          description: Notification data array
          in: formData
          required: false
          type: array
          items:
            type: string
      responses:
        201:
          description: OK

securityDefinitions:
  AdminSecurity:
    type: oauth2
    flow: password
    tokenUrl: 'http://api-startup.yedincisenol.com/oauth/token'
    scopes:
      '*': All Scopes
  ClientID:
    type: apiKey
    in: header
    name: client-id
  ClientSecret:
    type: apiKey
    name: client-secret
    in: header
  Language:
    type: apiKey
    name: Accept-Language
    in: header
  Timezone:
    type: apiKey
    name: Timezone
    in: header
  UserSecurity:
    type: apiKey
    name: Authorization
    in: header
    description: User Auth.
definitions:
  setting:
    type: object
    properties:
      is_notification_on:
        type: integer
  token:
    type: object
    properties:
      token_type:
        type: string
      expires_in:
        type: integer
      access_token:
        type: string
      refresh_token:
        type: string
  user:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      role:
        type: string
  device:
    type: object
    properties:
      id:
        type: integer
      token:
        type: string
      device_type:
        type: string
      created_at:
        type: string
  connect:
    type: object
    properties:
      id:
        type: integer
      provider:
        type: string
      provider_user_id:
        type: integer
      access_token:
        type: string
      refresh_token:
        type: string
  meta:
    type: object
    properties:
      include:
        type: object
        properties:
          available:
            type: array
            items:
              type: string
          default:
            type: array
            items:
              type: string

  error:
    type: object
    properties:
      message:
        type: string
      error:
        type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"